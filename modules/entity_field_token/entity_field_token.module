<?php

/**
 * @file
 * The hook implementations for the entity field token module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_extra_field_info().
 */
function entity_field_token_entity_extra_field_info() {
  $field_info = [];

  foreach(entity_field_token_storage()->loadMultiple() as $name => $definition) {
    if (!isset($definition->entity_type)) {
      continue;
    }
    $entity_type = $definition->entity_type;

    if (empty($definition->bundles)) {
      continue;
    }
    $bundles = $definition->bundles;

    foreach ($bundles as $bundle_name) {
      $field_info[$entity_type][$bundle_name]['display'][$name] = [
        'label' => $definition->label(),
        'description' => $definition->description,
        'weight' => 0
      ];
    }
  }

  return $field_info;
}

/**
 * Implements hook_entity_view().
 */
function entity_field_token_entity_view(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display,
  $view_mode) {

  /** @var \Drupal\Core\Utility\Token $token */
  $token = entity_field_token_get_token();
  $entity_type = $entity->getEntityTypeId();

  foreach (entity_field_token_field_token_elements($entity, $view_mode) as $name => $info) {
    $component = $display->getComponent($name);
    if (isset($build[$name]) || !isset($info['field_value']) || !isset($component)) {
      continue;
    }
    $value_format = NULL;
    $field_value = $info['field_value'];

    if (is_array($field_value)) {
      $value_format = isset($field_value['format'])
        ? $field_value['format']
        : NULL;
      $field_value = $field_value['value'];
    }
    $render_array = [];

    $token_value = trim($token->replace(
      $field_value, [$entity_type => $entity], ['clear' => TRUE]
    ));

    switch ($info['field_type']) {
      case 'textfield':
        $render_array = [
          '#plain_text' => $token_value,
        ];
        break;

      case 'text_format':
        $render_array = [
          '#type' => 'processed_text',
          '#text' => $token_value,
          '#format' => $value_format,
        ];
        break;
    }

    $build[$name] = $render_array;
  }
}

/**
 * Get token displays information.
 *
 * @param EntityInterface $entity
 *   The content entity object.
 *
 * @return array
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function entity_field_token_field_token_elements(EntityInterface $entity, $view_mode) {
  $elements = [];

  foreach (entity_field_token_get_token_displays_by_entity($entity) as $name => $definition) {
    if (!isset($definition->entity_type)) {
      continue;
    }
    $bundles = $definition->bundles;

    // Filter out field token element by entity bundle.
    if (empty($bundles) || !in_array($entity->bundle(), $bundles)) {
      continue;
    }
    $view_modes = $definition->view_modes;

    // Filter out field token element by entity display view mode.
    if (empty($view_modes) || !in_array($view_mode, $view_modes)) {
      continue;
    }

    $elements[$name] = [
      'field_type' => $definition->field_type,
      'field_value' => $definition->field_value,
    ];
  }

  return $elements;
}

/**
 * Get field token displays by entity.
 *
 * @param EntityInterface $entity
 *
 * @return EntityInterface[]
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function entity_field_token_get_token_displays_by_entity(EntityInterface $entity) {
  return entity_field_token_storage()
    ->loadByProperties(['entity_type' => $entity->getEntityTypeId()]);
}

/**
 * Get entity token field storage.
 *
 * @return \Drupal\Core\Entity\EntityStorageInterface
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function entity_field_token_storage() {
  return \Drupal::entityTypeManager()
    ->getStorage('entity_field_token');
}

/**
 * Get token service class.
 *
 * @return \Drupal\Core\Utility\Token|object
 */
function entity_field_token_get_token() {
  return \Drupal::getContainer()->get('token');
}
